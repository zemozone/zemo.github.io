<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zemo</title>
  
  
  <link href="https://zemo.github.io/atom.xml" rel="self"/>
  
  <link href="https://zemo.github.io/"/>
  <updated>2021-05-04T13:25:22.416Z</updated>
  <id>https://zemo.github.io/</id>
  
  <author>
    <name>zemo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Python 将在博客园发布文章时生成的图片的 Markdown 语法改为 HTML 语法</title>
    <link href="https://zemo.github.io/2021/05/04/convert_md_to_html_in_python/"/>
    <id>https://zemo.github.io/2021/05/04/convert_md_to_html_in_python/</id>
    <published>2021-05-04T11:19:17.000Z</published>
    <updated>2021-05-04T13:25:22.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Python-将在博客园发布文章时生成的图片的-Markdown-语法改为-HTML-语法"><a href="#使用-Python-将在博客园发布文章时生成的图片的-Markdown-语法改为-HTML-语法" class="headerlink" title="使用 Python 将在博客园发布文章时生成的图片的 Markdown 语法改为 HTML 语法"></a>使用 Python 将在博客园发布文章时生成的图片的 Markdown 语法改为 HTML 语法</h1><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>在博客园发布随笔/博客时，上传图片后将会自动生成图片的 <code>Markdown</code> 语法格式，形如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Img_title</span>](<span class="link">Img_url</span>)</span><br></pre></td></tr></table></figure><p>这样的话图片在文章中的位置会比较乱，导致文章排版并不是很美观，影响文章的整体阅读感受，但是好在可以使用 <code>HTML</code> 的语法替换掉 <code>Markdown</code> 的语法，并且可以添加一些属性，使得图片可以居中、缩放，整体看起来会比较舒适一些，可以使用下面这个 <code>HTML</code> 的代码来插入图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;Img_url&quot;</span> <span class="attr">width</span>=<span class="string">60%</span> <span class="attr">alt</span>=<span class="string">&quot;Img_title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML代码解读"><a href="#HTML代码解读" class="headerlink" title="HTML代码解读"></a>HTML代码解读</h3><ul><li><code>&lt;p&gt;&lt;/p&gt;</code> 是段落标签，此处内容为一张图片<ul><li><code>align</code> 属性指定内容对齐方式，<code>center</code> 使段落居中，在这里达到使图片居中的效果</li></ul></li><li><code>&lt;img&gt;</code> 是图片标签<ul><li><code>src</code> 属性指定图片的链接</li><li><code>width</code> 属性指定图片的缩放比例，这里定义为 60%，可以自己更改</li><li><code>alt</code> 属性指定图片标题，当由于某些原因图片未正确显示时显示该文字，表示此处应有一张图片</li></ul></li></ul><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>要明白写下面程序的目的，能完成什么任务，首先看一下效果，这要涉及到两个文件：<strong>contentfile</strong> 和 <strong>output</strong> (是两个文件的文件名，但是没有后缀名)</p><ol><li><code>contentfile</code> 的内容是在博客园后台发布文章时编辑区的内容，但是这里还只是将图片上传到相应的位置，图片的引用方式是 <code>Markdown</code> 的语法</li><li><code>output</code> 的内容是将文件 contentfile 的内容处理过后的信息，此时引用图片的语法应为 <code>HTML</code> 语法</li></ol><p>例如：</p><p><code>contentfile</code> 的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this is the first line</span><br><span class="line">这是第二行</span><br><span class="line">![图片](www.first.com)</span><br><span class="line">这是第几行</span><br><span class="line">下面是一张图片</span><br><span class="line">![第二张图片](www.second.com)</span><br></pre></td></tr></table></figure><p>那么经过程序处理后将会生成一个名为 <code>output</code> 的文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this is the first line</span><br><span class="line">这是第二行</span><br><span class="line">&lt;p align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;www.first.com&quot; width&#x3D;60% alt&#x3D;&quot;图片&quot;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">这是第几行</span><br><span class="line">下面是一张图片</span><br><span class="line">&lt;p align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;www.second.com&quot; width&#x3D;60% alt&#x3D;&quot;第二张图片&quot;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比一下，就能看到这个程序的功能。</p><p>“如果只是将引用图片从 Markdown 语法改为 HTML 语法，手动改一下不就可以吗？”</p><p>“你可以试试”</p><h2 id="逐步分析"><a href="#逐步分析" class="headerlink" title="逐步分析"></a>逐步分析</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>在开始写代码前<strong>先理清思路</strong>，大概流程是：</p><p><code>读取文件中的每一行 ——&gt; 判断该行内容是否为图片语法 ——&gt; 如果是则进行处理，否则跳过 ——&gt; 将该行写入输出文件</code></p><h3 id="打开文章内容文件与创建并打开输出文件"><a href="#打开文章内容文件与创建并打开输出文件" class="headerlink" title="打开文章内容文件与创建并打开输出文件"></a>打开文章内容文件与创建并打开输出文件</h3><p>将文章写到博客园发布文章的后台，在相应的位置上传图片，每张图片对应一行 <code>Markdown</code> 语法，然后将编辑区所有内容复制到一个文件中，这一个文件用来让程序读取，所以就需要先查看要读取的文件是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断待读取的文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;contentfile&quot;</span>):    <span class="comment"># contentfile 为文件名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The file to be read does not exist&quot;</span>)  <span class="comment"># 提示文件不存在</span></span><br><span class="line">    os._exit(<span class="number">0</span>)                          <span class="comment"># 主动退出，状态码 0 表示程序正常退出</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># (创建并)打开输出文件</span></span><br><span class="line">output_file = <span class="built_in">open</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 r+(读写) 打开待读取文件，编码方式为 utf-8</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;contentfile&quot;</span>, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br></pre></td></tr></table></figure><h3 id="依次读取文件中的每一行并判断是否到达文件结束"><a href="#依次读取文件中的每一行并判断是否到达文件结束" class="headerlink" title="依次读取文件中的每一行并判断是否到达文件结束"></a>依次读取文件中的每一行并判断是否到达文件结束</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while 循环重复执行读取操作</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = file.readline()    <span class="comment"># 读取文件的一行内容</span></span><br><span class="line">    <span class="comment"># 判断是否读到文件末尾</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>如果读取到了文件的末尾，那么 <code>readline</code> 读取到的将会是空的内容，<code>line</code> 也就变成了空(布尔值为<code>False</code>)，那么 <code>not line</code> 的布尔值也就成了 <code>True</code>，所以将会执行 <code>break</code> 来跳出循环，不再继续读取内容。</p><blockquote><p>此处的 “文件的末尾” 指的是文件最后的内容的后面的一个东西，称谓EOF(end-of-file)，并不是实际的文件内容的最后一个字符(字节)，而是最后一个字符(字节)再向后面一个字符(字节)</p></blockquote><p>如果文件有一行为空行(看起来并没有内容)，但是 <code>readline</code> 仍然是会读到内容的，如换行符等，<code>line</code> 转换为布尔值将会是 <code>True</code></p><h3 id="将图片的-Markdown-语法格式转换为-HTML-语法格式"><a href="#将图片的-Markdown-语法格式转换为-HTML-语法格式" class="headerlink" title="将图片的 Markdown 语法格式转换为 HTML 语法格式"></a>将图片的 Markdown 语法格式转换为 HTML 语法格式</h3><p>首先判断从文件读取到的每一行内容是否为 Markdown 的图片语法，这里简单的将它的特征视为第一个非空格字符为<code>!</code>，当然这并不是完全正确的做法，因为有可能刚好一个<code>!</code>在某一行普通的文本内容的开头，这里暂时这么做吧^_^</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTML 语法格式的图片的链接</span></span><br><span class="line"><span class="comment"># 里面的两个 &#123;&#125; 将会使用字符串的 format 方法进行填充内容</span></span><br><span class="line"><span class="comment"># 注意：字符串最后有两个换行符(\n)，这是我在测试过后发现两个换行符才可以使内容有较好的格式</span></span><br><span class="line">img_pattern_html = <span class="string">&#x27;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#123;&#125;&quot; width=60% alt=&quot;&#123;&#125;&quot;&lt;/p&gt;\n\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一行是否为空行，如果是，将会跳过</span></span><br><span class="line"><span class="comment"># 如果不是空行，那么将该行左边的空格去除</span></span><br><span class="line"><span class="comment"># 然后判断剩下的内容的第一个字符是否为 &quot;!&quot;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> line.isspace()) <span class="keyword">and</span> line.lstrip()[<span class="number">0</span>] == <span class="string">&quot;!&quot;</span>:</span><br><span class="line">    <span class="comment"># 如果符合假定的图片语法的“特征”，将会进行以下处理</span></span><br><span class="line">    <span class="comment"># 使用正则找到图片的标题以及图片的链接</span></span><br><span class="line">    title_and_url = re.findall(<span class="string">r&quot;!\[(.*?)]\((.*?)\)&quot;</span>, line)</span><br><span class="line">    <span class="comment"># 注意 findall 获取的内容的顺序，以及正确传入字符串中</span></span><br><span class="line">    <span class="comment"># 将 line 的值更新</span></span><br><span class="line">    line = img_pattern_html.<span class="built_in">format</span>(title_and_url[<span class="number">0</span>][<span class="number">1</span>], title_and_url[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="将内容写入到文件并关闭打开的输出文件"><a href="#将内容写入到文件并关闭打开的输出文件" class="headerlink" title="将内容写入到文件并关闭打开的输出文件"></a>将内容写入到文件并关闭打开的输出文件</h3><p>进行过上面的处理后，可以知道，如果变量 <code>line</code> 的内容是<code>Markdown</code> 引用图片的语法，那么将会处理一下，使代码转换为 <code>HTML</code> 的语法格式，并且再将 HTML 代码赋给变量 <code>line</code>，如果原来的内容只是普通的内容，将不会进行处理，<code>line</code>，的内容仍未原来的内容，那么只需要将 <code>line</code> 的内容写入到输出文件就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 writelines 方法将一行内容写入文件</span></span><br><span class="line">output_file.writelines(line)</span><br></pre></td></tr></table></figure><p>还有一件重要的事，记得之前打开了输出文件，但是并不是使用 <code>with ... as ...</code> 这样上下文处理方式打开，所以需要手动来关闭该文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output_file.close()</span><br></pre></td></tr></table></figure><p>这样就差不多了</p><h2 id="完整程序代码"><a href="#完整程序代码" class="headerlink" title="完整程序代码"></a>完整程序代码</h2><p>上面对程序的一些细节之处做了解释，下面就是完整的程序的代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">img_pattern_html = <span class="string">&#x27;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#123;&#125;&quot; width=60% alt=&quot;&#123;&#125;&quot;&lt;/p&gt;\n\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;contentfile&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The file to be read does not exist&quot;</span>)</span><br><span class="line">    os._exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">output_file = <span class="built_in">open</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;contentfile&quot;</span>, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = file.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> line.isspace()) <span class="keyword">and</span> line.lstrip()[<span class="number">0</span>] == <span class="string">&quot;!&quot;</span>:</span><br><span class="line">            title_and_url = re.findall(<span class="string">&quot;!\[(.*?)]\((.*?)\)&quot;</span>, line)</span><br><span class="line">            line = img_pattern_html.<span class="built_in">format</span>(title_and_url[<span class="number">0</span>][<span class="number">1</span>], title_and_url[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">output_file.writelines(line)</span><br><span class="line">output_file.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DONE&quot;</span>)</span><br></pre></td></tr></table></figure><p>到此程序已经写完了，下次再发文章时就不用再一张一张图片的上传然后再一个一个的修改了，省下了很多功夫</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Python-将在博客园发布文章时生成的图片的-Markdown-语法改为-HTML-语法&quot;&gt;&lt;a href=&quot;#使用-Python-将在博客园发布文章时生成的图片的-Markdown-语法改为-HTML-语法&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="python" scheme="https://zemo.github.io/tags/python/"/>
    
  </entry>
  
</feed>
